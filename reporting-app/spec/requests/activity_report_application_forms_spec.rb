require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/activity_report_application_forms", type: :request do
  include Warden::Test::Helpers

  let(:user) { User.create!(email: "test@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  # This should return the minimal set of attributes required to create a valid
  # ActivityReportApplicationForm. As you add validations to ActivityReportApplicationForm, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      employer_name: "Acme Corp",
      minutes: 60, # 1 hour
      reporting_period: (Date.today - 1.month).beginning_of_month,
      supporting_documents: [
        fixture_file_upload('spec/fixtures/files/test_document_1.pdf', 'application/pdf'),
        fixture_file_upload('spec/fixtures/files/test_document_2.txt', 'text/plain'),
        fixture_file_upload('spec/fixtures/files/test_document_3.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
      ]
    }
  end

  let(:invalid_attributes) do
    {
      employer_name: "",
      minutes: 10 # Less than minimum 15 minutes
    }
  end

  before do
    login_as user
  end

  after do
    Warden.test_reset!
  end

  describe "GET /index" do
    it "renders a successful response" do
      ActivityReportApplicationForm.create! valid_attributes
      get activity_report_application_forms_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      get activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_activity_report_application_form_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      get edit_activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ActivityReportApplicationForm" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        }.to change(ActivityReportApplicationForm, :count).by(1)
      end

      it "redirects to the created activity_report_application_form" do
        post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        expect(response).to redirect_to(review_activity_report_application_form_url(ActivityReportApplicationForm.last))
      end

      it "attaches multiple supporting documents" do
        post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        created_form = ActivityReportApplicationForm.last
        expect(created_form.supporting_documents.attached?).to be true
        expect(created_form.supporting_documents.count).to eq(3)
        expect(created_form.supporting_documents.map(&:filename).map(&:to_s)).to include(
          "test_document_1.pdf",
          "test_document_2.txt",
          "test_document_3.docx"
        )
      end

      it "creates an activity report case" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        }.to change(ActivityReportCase, :count).by(1)

        created_form = ActivityReportApplicationForm.last
        kase = ActivityReportCase.find_by(application_form_id: created_form.id)
        expect(kase).not_to be_nil
        expect(kase.business_process_instance.current_step).to eq("submit_report")
      end
    end

    context "with invalid parameters" do
      it "does not create a new ActivityReportApplicationForm" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: invalid_attributes }
        }.not_to change(ActivityReportApplicationForm, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post activity_report_application_forms_url, params: { activity_report_application_form: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          employer_name: "New Employer Corp",
          minutes: 45, # 45 minutes
          supporting_documents: [
            fixture_file_upload('spec/fixtures/files/test_document_2.txt', 'text/plain')
          ]
        }
      }

      it "updates the requested activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(activity_report_application_form.employer_name).to eq("New Employer Corp")
        expect(activity_report_application_form.minutes).to eq(45)
      end

      it "redirects to the activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(response).to redirect_to(review_activity_report_application_form_url(activity_report_application_form))
      end

      it "updates the supporting documents" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        expect(activity_report_application_form.supporting_documents.count).to eq(3)

        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload

        expect(activity_report_application_form.supporting_documents.count).to eq(1)
        expect(activity_report_application_form.supporting_documents.first.filename.to_s).to eq("test_document_2.txt")
      end
    end

    context "with invalid parameters" do
      let(:new_attributes) {
        {
          employer_name: "New Employer Corp",
          minutes: 10 # Under 15 minutes
        }
      }

      it "does not update the requested activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(activity_report_application_form.minutes).to eq(60)
      end

      it "renders a successful response (i.e. to display the 'edit' template)" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "POST /submit" do
    let(:application_form) { ActivityReportApplicationForm.create! valid_attributes
}

    before do
      post submit_activity_report_application_form_url(application_form)
    end

    it "marks the activity report as submitted" do
      application_form.reload
      expect(application_form).to be_submitted
    end

    it "sets the current step of the case to 'review_report'" do
      kase = ActivityReportCase.find_by(application_form_id: application_form.id)
      expect(kase.business_process_instance.current_step).to eq("review_report")
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested activity_report_application_form" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      expect {
        delete activity_report_application_form_url(activity_report_application_form)
      }.to change(ActivityReportApplicationForm, :count).by(-1)
    end

    it "redirects to the activity_report_application_forms list" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      delete activity_report_application_form_url(activity_report_application_form)
      expect(response).to redirect_to(activity_report_application_forms_url)
    end
  end
end
