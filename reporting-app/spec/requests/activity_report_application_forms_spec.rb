require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/dashboard/activity_report_application_forms", type: :request do
  include Warden::Test::Helpers

  let(:user) { User.create!(email: "test@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  let(:other_user) { User.create!(email: "test-other@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  # This should return the minimal set of attributes required to create a valid
  # ActivityReportApplicationForm. As you add validations to ActivityReportApplicationForm, be sure to
  # adjust the attributes here as well.
  let(:valid_request_attributes) do
    {
      reporting_period: (Date.today - 1.month).beginning_of_month
    }
  end

  let(:valid_db_attributes) do
    valid_request_attributes.merge!(
      {
        user_id: user.id
      }
    )
  end

  before do
    login_as user
  end

  after do
    Warden.test_reset!
  end

  describe "GET /show" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      get activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end

    it "errors if not owning user" do
      login_as other_user
      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      get activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_client_error
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_activity_report_application_form_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    let(:activity_report_application_form) { ActivityReportApplicationForm.create! valid_db_attributes }

    context "with reporting source set to 'income_verification_service'" do
      let(:invitation) {
        CMSIncomeVerificationService::Invitation.new(
          tokenized_url: "https://ivaas.gov/en/cbv/entry?token=dummy-token",
          expiration_date: DateTime.now + 7.days,
          language: "en"
        )
      }
      let(:mock_service) { instance_double(CMSIncomeVerificationService) }

      before do
        allow(Rails.application.config).to receive(:reporting_source).and_return("income_verification_service")
        allow(CMSIncomeVerificationService).to receive(:new).and_return(mock_service)
        allow(mock_service).to receive(:create_invitation)
          .with(activity_report_application_form, instance_of(Flex::Name))
          .and_return(invitation)
      end

      it "redirects to the income verification service" do
        get edit_activity_report_application_form_url(activity_report_application_form)
        expect(response).to redirect_to("https://ivaas.gov/en/cbv/entry?token=dummy-token")
      end

      it "renders an error response for non-owning user" do
        login_as other_user

        get edit_activity_report_application_form_url(activity_report_application_form)
        expect(response).to be_client_error
      end
    end

    context "with reporting source set to 'reporting_app'" do
      before do
        allow(Rails.application.config).to receive(:reporting_source).and_return("reporting_app")
      end

      it "renders a successful response" do
        get edit_activity_report_application_form_url(activity_report_application_form)
        expect(response).to be_successful
      end

      it "renders an error response for non-owning user" do
        login_as other_user

        get edit_activity_report_application_form_url(activity_report_application_form)
        expect(response).to be_client_error
      end
    end
  end

  describe "GET /review" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      get review_activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ActivityReportApplicationForm" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_request_attributes }
        }.to change(ActivityReportApplicationForm, :count).by(1)

        created_form = ActivityReportApplicationForm.last
        expect(created_form.user_id).to eq(user.id)
      end

      it "creates a new ActivityReportApplicationForm, with only approved attributes" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_request_attributes.merge!({ user_id: other_user.id, submitted_at: Time.now }) }
        }.to change(ActivityReportApplicationForm, :count).by(1)

        created_form = ActivityReportApplicationForm.last
        expect(created_form.user_id).to eq(user.id)
      end

      it "redirects to the created activity_report_application_form" do
        post activity_report_application_forms_url, params: { activity_report_application_form: valid_request_attributes }
        expect(response).to redirect_to(activity_report_application_form_url(ActivityReportApplicationForm.last))
      end

      it "creates an activity report case" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_request_attributes }
        }.to change(ActivityReportCase, :count).by(1)

        created_form = ActivityReportApplicationForm.last
        kase = ActivityReportCase.find_by(application_form_id: created_form.id)
        expect(kase).not_to be_nil
        expect(kase.business_process_instance.current_step).to eq("submit_report")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          reporting_period: (Date.today - 3.month).beginning_of_month
        }
      }

      it "updates the requested activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(activity_report_application_form.reporting_period).to eq((Date.today - 3.month).beginning_of_month)
      end

      it "does not update the requested activity_report_application_form if non-owning user" do
        login_as other_user

        activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
        activity_report_application_form_original = activity_report_application_form.dup

        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }

        # assert DB state is still in the previous state
        activity_report_application_form.reload

        ignored_attributes = [ "id", "created_at", "updated_at" ]
        expect(activity_report_application_form.attributes.except(*ignored_attributes))
          .to eq(activity_report_application_form_original.attributes.except(*ignored_attributes))

        expect(response).to be_client_error
      end

      it "redirects to the activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(response).to redirect_to(review_activity_report_application_form_url(activity_report_application_form))
      end
    end
  end

  describe "POST /submit" do
    let(:application_form) { ActivityReportApplicationForm.create! valid_db_attributes }

    it "marks the activity report as submitted" do
      post submit_activity_report_application_form_url(application_form)

      application_form.reload
      expect(application_form).to be_submitted
    end

    it "redirects to GET /show on success" do
      post submit_activity_report_application_form_url(application_form)

      expect(response).to redirect_to(activity_report_application_form_url(application_form))
    end

    it "sets the current step of the case to 'review_report'" do
      post submit_activity_report_application_form_url(application_form)

      kase = ActivityReportCase.find_by(application_form_id: application_form.id)
      expect(kase.business_process_instance.current_step).to eq("review_report")
    end

    it "errors if not owning user" do
      login_as other_user

      post submit_activity_report_application_form_url(application_form)

      expect(response).to be_client_error
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested activity_report_application_form" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      expect {
        delete activity_report_application_form_url(activity_report_application_form)
      }.to change(ActivityReportApplicationForm, :count).by(-1)
    end

    it "does not destroy the requested activity_report_application_form if non-owning user" do
      login_as other_user

      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      expect {
        delete activity_report_application_form_url(activity_report_application_form)
      }.not_to change(ActivityReportApplicationForm, :count)
    end

    it "redirects to the dashboard" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_db_attributes
      delete activity_report_application_form_url(activity_report_application_form)
      expect(response).to redirect_to(dashboard_path)
    end
  end
end
