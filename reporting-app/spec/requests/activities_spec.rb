require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/activities", type: :request do
  include Warden::Test::Helpers

  let(:user) { User.create!(email: "test@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  let(:other_user) { User.create!(email: "test-other@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  let!(:activity_report_application_form) { create(:activity_report_application_form, :with_activities, user_id: user.id) }
  let!(:activity) { activity_report_application_form.activities.first }
  
  # This should return the minimal set of attributes required to create a valid
  # Activity. As you add validations to Activity, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Acme Corp",
      hours: 80.0,
      month: (Date.today - 1.month).beginning_of_month,
      supporting_documents: [
        fixture_file_upload('spec/fixtures/files/test_document_1.pdf', 'application/pdf'),
        fixture_file_upload('spec/fixtures/files/test_document_2.txt', 'text/plain'),
        fixture_file_upload('spec/fixtures/files/test_document_3.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
      ]
    }
  }

  let(:valid_db_attributes) do
    valid_request_attributes.merge!(
      {
        user_id: user.id
      }
    )
  end

  before do
    login_as user
  end

  after do
    Warden.test_reset!
  end

  describe "GET /show" do
    it "renders a successful response" do
      get activity_report_application_form_activity_url(activity_report_application_form, activity)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_activity_report_application_form_activity_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_activity_report_application_form_activity_url(activity_report_application_form, activity)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Activity" do
        expect {
          post activity_report_application_form_activities_url(activity_report_application_form), params: { activity: valid_attributes }
        }.to change(Activity, :count).by(1)
      end

      it "redirects to the activity report" do
        post activity_report_application_form_activities_url(activity_report_application_form), params: { activity: valid_attributes }
        expect(response).to redirect_to(activity_report_application_form_url(activity_report_application_form))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested activity" do
        activity = Activity.create! valid_attributes
        patch activity_url(activity), params: { activity: new_attributes }
        activity.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the activity" do
        activity = Activity.create! valid_attributes
        patch activity_url(activity), params: { activity: new_attributes }
        activity.reload
        expect(response).to redirect_to(activity_url(activity))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        activity = Activity.create! valid_attributes
        patch activity_url(activity), params: { activity: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested activity" do
      activity = Activity.create! valid_attributes
      expect {
        delete activity_url(activity)
      }.to change(Activity, :count).by(-1)
    end

    it "redirects to the activities list" do
      activity = Activity.create! valid_attributes
      delete activity_url(activity)
      expect(response).to redirect_to(activities_url)
    end
  end
end
