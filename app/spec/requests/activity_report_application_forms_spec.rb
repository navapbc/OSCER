require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/activity_report_application_forms", type: :request do
  include Warden::Test::Helpers

  let(:user) { User.create!(email: "test@example.com", uid: SecureRandom.uuid, provider: "login.gov") }

  # This should return the minimal set of attributes required to create a valid
  # ActivityReportApplicationForm. As you add validations to ActivityReportApplicationForm, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { employer_name: "Acme Corp" },
    { reporting_period: (Date.today - 1.month).beginning_of_month }
  }

  before do
    login_as user
  end

  after do
    Warden.test_reset!
  end

  describe "GET /index" do
    it "renders a successful response" do
      ActivityReportApplicationForm.create! valid_attributes
      get activity_report_application_forms_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      get activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_activity_report_application_form_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      get edit_activity_report_application_form_url(activity_report_application_form)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ActivityReportApplicationForm" do
        expect {
          post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        }.to change(ActivityReportApplicationForm, :count).by(1)
      end

      it "redirects to the created activity_report_application_form" do
        post activity_report_application_forms_url, params: { activity_report_application_form: valid_attributes }
        expect(response).to redirect_to(activity_report_application_form_url(ActivityReportApplicationForm.last))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { employer_name: "New Employer Corp" }
      }

      it "updates the requested activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(activity_report_application_form.employer_name).to eq("New Employer Corp")
      end

      it "redirects to the activity_report_application_form" do
        activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
        patch activity_report_application_form_url(activity_report_application_form), params: { activity_report_application_form: new_attributes }
        activity_report_application_form.reload
        expect(response).to redirect_to(activity_report_application_form_url(activity_report_application_form))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested activity_report_application_form" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      expect {
        delete activity_report_application_form_url(activity_report_application_form)
      }.to change(ActivityReportApplicationForm, :count).by(-1)
    end

    it "redirects to the activity_report_application_forms list" do
      activity_report_application_form = ActivityReportApplicationForm.create! valid_attributes
      delete activity_report_application_form_url(activity_report_application_form)
      expect(response).to redirect_to(activity_report_application_forms_url)
    end
  end
end
